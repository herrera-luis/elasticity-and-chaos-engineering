Description: >
    Plaftforms Community Project - Infraestructure

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resources
        Type: String

    VpcCIDR:
        Description: Please enter the IP range (CIDR notation) for this
        Type: String
        Default: 10.0.0.0/16

    PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the Subnet
        Type: String
        Default: 10.0.0.0/24

    PublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the Subnet
        Type: String
        Default: 10.0.1.0/24

    InstanceType:
        Description: 
            "The EC2 instance type of general purpose"
        Type: String
        AllowedValues: [t2.medium, t3.small, t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge]


Resources:

    VPC:
        Type: AWS::EC2::VPC
        Properties:
          CidrBlock: !Ref VpcCIDR
          EnableDnsHostnames: true
          Tags:
              - Key: Name
                Value: !Ref EnvironmentName
   
    PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref VPC 
          AvailabilityZone: !Select [ 0, !GetAZs '' ]
          CidrBlock: !Ref PublicSubnet1CIDR
          MapPublicIpOnLaunch: false
          Tags: 
              - Key: Name
                Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs '' ]
          CidrBlock: !Ref PublicSubnet2CIDR
          MapPublicIpOnLaunch: false
          Tags: 
              - Key: Name
                Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

    InternetGateway: 
        Type: AWS::EC2::InternetGateway

    InternetGatewayAttachment:
        Type:  AWS::EC2::VPCGatewayAttachment 
        Properties: 
          VpcId: !Ref VPC 
          InternetGatewayId: !Ref InternetGateway
    
    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Routes

    DefaultPublicRoute: 
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties: 
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway
    
    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2
            
    RootRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: 
                !Sub ${EnvironmentName}-Role
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                -   Effect: Allow
                    Principal:
                        Service:
                        - ec2.amazonaws.com
                    Action:
                    - sts:AssumeRole
            Path: "/"

    RolePolicies:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: AmazonS3ReadOnlyAccess
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                - 
                    Effect: Allow
                    Action: 
                    -   s3:Get*
                    -   s3:List*
                    Resource: 
                    -   arn:aws:s3:::c3pipelines-devops
                    -   arn:aws:s3:::c3pipelines-devops/*
            Roles:
            -   Ref: RootRole

    RootInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: "/"
            Roles:
            - Ref: RootRole

    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http and ssh to our load balancer
            VpcId: !Ref VPC
            SecurityGroupIngress:
            -   IpProtocol: tcp
                FromPort: 0
                ToPort: 65535
                CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            -   IpProtocol: tcp
                FromPort: 0
                ToPort: 65535
                CidrIp: 0.0.0.0/0

    WebAppLaunchConfig: 
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    # Install Docker
                    apt-get update -y
                    apt-get install -y \
                    apt-transport-https \
                    ca-certificates \
                    curl \
                    gnupg-agent \
                    software-properties-common
                    sudo apt-get install -y python2.7
                    curl -O https://bootstrap.pypa.io/get-pip.py
                    sudo python2.7 get-pip.py
                    sudo pip install awscli
                    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
                    add-apt-repository \
                    "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
                    $(lsb_release -cs) \
                    stable"
                    apt-get update -y
                    apt-get install -y docker-ce docker-ce-cli containerd.io
                    usermod -aG docker ubuntu
                    mkdir /app/
                    chmod 777 -R /app/
                    aws s3 cp s3://c3pipelines-devops /app/ --recursive
                    docker run -l service=nginx --name nginx-app -p 80:80 -d -v /app/:/usr/share/nginx/html nginx
                    # Install Gremlin
                    echo "deb https://deb.gremlin.com/ release non-free" | sudo tee /etc/apt/sources.list.d/gremlin.list
                    sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C81FC2F43A48B25808F9583BDFF170F324D41134 9CDB294B29A5B1E2E00C24C022E8EF3461A50EF6
                    sudo apt-get update && sudo apt-get install -y gremlin gremlind
                    # Install jq
                    sudo apt-get -y install jq
                    # Configuring Gremlin Daemon
                    sudo mv /etc/default/gremlind.example /etc/default/gremlind
                    sudo chmod 777 /etc/default/gremlind
                    echo 'GREMLIN_TEAM_CERTIFICATE_OR_FILE="file:///var/lib/gremlin/gremlin.pub_cert.pem"' >> /etc/default/gremlind
                    echo 'GREMLIN_TEAM_PRIVATE_KEY_OR_FILE="file:///var/lib/gremlin/gremlin.priv_key.pem"' >> /etc/default/gremlind
                    echo  GREMLIN_TEAM_ID=$(aws secretsmanager get-secret-value --secret-id xconf/gremlin --region us-west-1 --output json | jq ' {secrets: .SecretString} | tostring | '.[35:71]'' | tr -d '\"') >> /etc/default/gremlind
                    echo  GREMLIN_TEAM_SECRET=$(aws secretsmanager get-secret-value --secret-id xconf/gremlin --region us-west-1 --output json | jq ' {secrets: .SecretString} | tostring | '.[100:136]'' | tr -d '\"') >> /etc/default/gremlind
                    sudo systemctl reload gremlind
            ImageId: ami-052ae783527d1a0c9
            KeyName: platforms-key
            AssociatePublicIpAddress: true
            IamInstanceProfile: !Ref RootInstanceProfile
            SecurityGroups:
            -   Ref: WebServerSecGroup
            InstanceType: !Ref 'InstanceType'
            BlockDeviceMappings:
            -   DeviceName: "/dev/sdk"
                Ebs:
                    VolumeSize: '10' #10GB

    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId: !Ref VPC

    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:  
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2 
            LaunchConfigurationName:
                Ref: WebAppLaunchConfig
            MinSize: '2'
            MaxSize: '5'
            TargetGroupARNs:
            -   Ref: WebAppTargetGroup

    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            SecurityGroups:
            - Ref: WebServerSecGroup
            Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
            -   Type: forward
                TargetGroupArn:
                    Ref: WebAppTargetGroup
            LoadBalancerArn:
                Ref: WebAppLB
            Port: '80'
            Protocol: HTTP

    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
            -   Type: forward
                TargetGroupArn: !Ref 'WebAppTargetGroup'
            Conditions:
            -   Field: path-pattern
                Values: [/]
            ListenerArn: !Ref 'Listener'
            Priority: 1
            
Outputs:

    VPC:
        Description: A reference to the created VPC
        Value: !Ref VPC
        Export:
          Name: !Sub ${EnvironmentName}-VPCID

    WebAppGroup:
        Description: A reference to the AutoScalingGroup
        Value: !Ref WebAppGroup
        Export:
          Name: !Sub ${EnvironmentName}-ASG

    PublicSubnets:
        Description: A list of the public subnets
        Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
        Export:
          Name: !Sub ${EnvironmentName}-PUB-NETS

    WebAppLoadBalancerDNSName:
        Description: DNS name or Public URL of the Load Balancer
        Value: !Join [ "", [ 'http://', !GetAtt WebAppLB.DNSName ]]
        Export:
            Name: !Sub ${EnvironmentName}-LB-DNSName
    